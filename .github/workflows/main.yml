name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ======================================================
  # 🧪 CI - Continuous Integration
  # Build + Test toàn bộ microservices
  # ======================================================
  build_and_test:
    name: Continuous Integration (Build & Test)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate environment files (.env)
        run: |
          mkdir -p auth product order api-gateway

          # Auth service
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" > auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env

          # Product service
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" > product/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

          # Order service
          echo "MONGODB_ORDER_URI=${{ secrets.MONGODB_ORDER_URI }}" > order/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> order/.env

          # API Gateway service
          echo "PORT=3003" > api-gateway/.env
          echo "AUTH_SERVICE_URL=${{ secrets.AUTH_SERVICE_URL }}" >> api-gateway/.env
          echo "PRODUCT_SERVICE_URL=${{ secrets.PRODUCT_SERVICE_URL }}" >> api-gateway/.env
          echo "ORDER_SERVICE_URL=${{ secrets.ORDER_SERVICE_URL }}" >> api-gateway/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> api-gateway/.env

      - name: Build all Docker images
        run: docker compose build

      - name: Start dependencies (MongoDB & RabbitMQ)
        run: |
          docker compose up -d mongodb rabbitmq
          echo "⏳ Waiting for MongoDB..."
          for i in {1..20}; do
            if docker compose exec -T mongodb mongosh --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; then
              echo "✅ MongoDB is ready!"
              break
            fi
            echo "MongoDB not ready yet ($i)..."
            sleep 5
          done

      - name: Run tests (Auth)
        run: docker compose run --rm auth npm test

      - name: Run tests (Product)
        run: docker compose run --rm product npm test


      - name: Clean up containers
        if: always()
        run: docker compose down -v


  # ======================================================
  # 🚀 CD - Continuous Delivery
  # Build & Push images lên Docker Hub (sau khi CI pass)
  # ======================================================
  deploy_to_dockerhub:
    name: Continuous Delivery (Deploy to Docker Hub)
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/auth:latest ./auth
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/product:latest ./product
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/order:latest ./order
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest ./api-gateway

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/order:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
